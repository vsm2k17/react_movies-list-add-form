{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","newMovie","validation","isValidImgUrl","isValidImdbUrl","handleChange","event","target","name","value","setState","trimLeft","handleBlur","validateTarget","test","addMovie","this","props","arrayOfValidations","Object","values","onSubmit","preventDefault","cs","form__input","onChange","onBlur","required","hidden","disabled","some","valid","type","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.35a66c20.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\nimport cs from 'classnames';\n\nexport class NewMovie extends Component {\n  state = {\n    newMovie: {\n      title: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      description: '',\n    },\n    validation: {\n      title: null,\n      imgUrl: null,\n      imdbUrl: null,\n      imdbId: null,\n      isValidImgUrl: true,\n      isValidImdbUrl: true,\n      description: null,\n    },\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n\n    this.setState(state => ({ newMovie: {\n      ...state.newMovie,\n      [name]: value.trimLeft(),\n    } }));\n  }\n\n  handleBlur = (event) => {\n    const { value, name } = event.target;\n    // eslint-disable-next-line max-len\n    const regexp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (!value) {\n      this.setState(state => ({ validation: {\n        ...state.validation,\n        [name]: false,\n      } }));\n    } else if (name === 'imgUrl' || name === 'imdbUrl') {\n      let validateTarget;\n\n      if (name === 'imgUrl') {\n        validateTarget = 'isValidImgUrl';\n      } else {\n        validateTarget = 'isValidImdbUrl';\n      }\n\n      if (!regexp.test(value)) {\n        this.setState(state => ({ validation: {\n          ...state.validation,\n          [name]: false,\n          [validateTarget]: false,\n        } }));\n      } else {\n        this.setState(state => ({ validation: {\n          ...state.validation,\n          [name]: true,\n          [validateTarget]: true,\n        } }));\n      }\n    } else {\n      this.setState(state => ({ validation: {\n        ...state.validation,\n        [name]: true,\n      } }));\n    }\n  }\n\n  render() {\n    const { addMovie } = this.props;\n    const { newMovie, validation } = this.state;\n    const arrayOfValidations = [...Object.values(validation)];\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          addMovie(this.state.newMovie);\n          this.setState({\n            newMovie: {\n              title: '',\n              imgUrl: '',\n              imdbUrl: '',\n              imdbId: '',\n              description: '',\n            },\n            validation: {\n              title: null,\n              imgUrl: null,\n              imdbUrl: null,\n              imdbId: null,\n              isValidImgUrl: true,\n              isValidImdbUrl: true,\n              description: null,\n            },\n          });\n        }}\n      >\n        <span>title</span>\n        <input\n          className={cs({\n            form__input: true,\n            'form__input-with-errors': !(validation.title\n            || validation.title === null),\n          })\n          }\n          value={newMovie.title}\n          onChange={this.handleChange}\n          name=\"title\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.title || validation.title === null}\n        >\n          field must not be empty\n        </p>\n        <span>description</span>\n        <input\n          className={cs({\n            form__input: true,\n            'form__input-with-errors': !(validation.description\n            || validation.description === null),\n          })\n          }\n          value={newMovie.description}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          name=\"description\"\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.description || validation.description === null}\n        >\n          field must not be empty\n        </p>\n        <span>imgUrl</span>\n        <input\n          className={cs({\n            form__input: true,\n            'form__input-with-errors': !(validation.imgUrl\n            || validation.imgUrl === null),\n          })\n          }\n          value={newMovie.imgUrl}\n          onChange={this.handleChange}\n          name=\"imgUrl\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imgUrl || validation.imgUrl === null}\n        >\n          {validation.isValidImgUrl\n            ? 'field must not be empty'\n            : 'invalid url'\n          }\n        </p>\n        <span>imdbUrl</span>\n        <input\n          className={cs({\n            form__input: true,\n            'form__input-with-errors': !(validation.imdbUrl\n            || validation.imdbUrl === null),\n          })\n          }\n          value={newMovie.imdbUrl}\n          onChange={this.handleChange}\n          name=\"imdbUrl\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imdbUrl || validation.imdbUrl === null}\n        >\n          {validation.isValidImdbUrl\n            ? 'field must not be empty'\n            : 'invalid url'\n          }\n        </p>\n        <span>imdbId</span>\n        <input\n          className={cs({\n            form__input: true,\n            'form__input-with-errors': !(validation.imdbId\n            || validation.imdbId === null),\n          })\n          }\n          value={newMovie.imdbId}\n          onChange={this.handleChange}\n          name=\"imdbId\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imdbId || validation.imdbId === null}\n        >\n          field must not be empty\n        </p>\n        <button\n          disabled={arrayOfValidations.some(valid => !valid)}\n          className=\"form__btn\"\n          type=\"submit\"\n        >\n          add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({ movies: [...state.movies, movie] }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}