{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/NewMovie/NewMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","defaultProps","MoviesList","movies","map","movie","key","imdbId","NewMovie","state","newMovie","validation","isValidImgUrl","isValidImdbUrl","sumbmitDisabled","handleChange","event","target","name","value","arrayOfValidations","Object","values","setState","some","valid","handleBlur","validateTarget","test","addMovie","this","props","onSubmit","preventDefault","onChange","onBlur","required","hidden","disabled","type","Component","App","moviesFromServer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a5e4b7aa.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './MovieCard.scss';\n\nexport const MovieCard = ({ title, description, imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n\nMovieCard.defaultProps = {\n  description: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      title: PropTypes.string.isRequired,\n      description: PropTypes.string,\n      imgUrl: PropTypes.string.isRequired,\n      imdbUrl: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nMoviesList.defaultProps = {\n  movies: [],\n};\n","import React, { Component } from 'react';\nimport './NewMovie.scss';\nimport PropTypes from 'prop-types';\n\nexport class NewMovie extends Component {\n  state = {\n    newMovie: {\n      title: '',\n      imgUrl: '',\n      imdbUrl: '',\n      imdbId: '',\n      description: '',\n    },\n    validation: {\n      title: true,\n      imgUrl: true,\n      imdbUrl: true,\n      imdbId: true,\n      isValidImgUrl: true,\n      isValidImdbUrl: true,\n    },\n    sumbmitDisabled: true,\n  };\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    const { validation } = this.state;\n    const arrayOfValidations = [...Object.values(validation)];\n\n    this.setState(state => ({ newMovie: {\n      ...state.newMovie,\n      [name]: value,\n    } }));\n\n    if (!arrayOfValidations.some(valid => !valid)) {\n      this.setState({ sumbmitDisabled: false });\n    }\n  }\n\n  handleBlur = (event) => {\n    const { value, name } = event.target;\n    // eslint-disable-next-line max-len\n    const regexp = /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/;\n\n    if (!value) {\n      this.setState(state => ({ validation: {\n        ...state.validation,\n        [name]: false,\n      } }));\n    } else if (name === 'imgUrl' || name === 'imdbUrl') {\n      let validateTarget;\n\n      if (name === 'imgUrl') {\n        validateTarget = 'isValidImgUrl';\n      } else {\n        validateTarget = 'isValidImdbUrl';\n      }\n\n      if (!regexp.test(value)) {\n        this.setState(state => ({ validation: {\n          ...state.validation,\n          [name]: false,\n          [validateTarget]: false,\n        } }));\n      }\n    }\n  }\n\n  render() {\n    const { addMovie } = this.props;\n    const { newMovie, validation, sumbmitDisabled } = this.state;\n\n    return (\n      <form\n        className=\"form\"\n        onSubmit={(event) => {\n          event.preventDefault();\n\n          addMovie(this.state.newMovie);\n          this.setState({\n            newMovie: {\n              title: '',\n              imgUrl: '',\n              imdbUrl: '',\n              imdbId: '',\n              description: '',\n            },\n            sumbmitDisabled: true,\n          });\n        }}\n      >\n        <span>title</span>\n        <input\n          className={validation.title\n            ? 'form__input'\n            : 'form__input form__input-with-errors'\n          }\n          value={newMovie.title}\n          onChange={this.handleChange}\n          name=\"title\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.title}\n        >\n          field must not be empty\n        </p>\n        <span>description</span>\n        <input\n          className=\"form__input\"\n          value={newMovie.description}\n          onChange={this.handleChange}\n          name=\"description\"\n        />\n        <span>imgUrl</span>\n        <input\n          className={validation.imgUrl\n            ? 'form__input'\n            : 'form__input form__input-with-errors'\n          }\n          value={newMovie.imgUrl}\n          onChange={this.handleChange}\n          name=\"imgUrl\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imgUrl}\n        >\n          {validation.isValidImgUrl\n            ? 'field must not be empty'\n            : 'invalid url'\n          }\n        </p>\n        <span>imdbUrl</span>\n        <input\n          className={validation.imdbUrl\n            ? 'form__input'\n            : 'form__input form__input-with-errors'\n          }\n          value={newMovie.imdbUrl}\n          onChange={this.handleChange}\n          name=\"imdbUrl\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imdbUrl}\n        >\n          {validation.isValidImdbUrl\n            ? 'field must not be empty'\n            : 'invalid url'\n          }\n        </p>\n        <span>imdbId</span>\n        <input\n          className={validation.imdbId\n            ? 'form__input'\n            : 'form__input form__input-with-errors'\n          }\n          value={newMovie.imdbId}\n          onChange={this.handleChange}\n          name=\"imdbId\"\n          onBlur={this.handleBlur}\n          required\n        />\n        <p\n          className=\"form__error-message\"\n          hidden={validation.imdbId}\n        >\n          field must not be empty\n        </p>\n        <button disabled={sumbmitDisabled} className=\"form__btn\" type=\"submit\">\n          add\n        </button>\n      </form>\n    );\n  }\n}\n\nNewMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { NewMovie } from './components/NewMovie';\nimport moviesFromServer from './api/movies.json';\n\nexport class App extends Component {\n  state = {\n    movies: moviesFromServer,\n  };\n\n  addMovie = (movie) => {\n    this.setState(state => ({ movies: [...state.movies, movie] }));\n  };\n\n  render() {\n    const { movies } = this.state;\n\n    return (\n      <div className=\"page\">\n        <div className=\"page-content\">\n          <MoviesList movies={movies} />\n        </div>\n        <div className=\"sidebar\">\n          <NewMovie addMovie={this.addMovie} />\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}